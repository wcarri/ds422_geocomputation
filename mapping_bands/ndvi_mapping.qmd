---
title: "üåø NDVI over O ªahu with Sentinel-2 (R Tutorial)"
subtitle: "From Copernicus Browser to NDVI map in minutes"
author: "Your Name"
format:
  html:
    theme: cosmo
    toc: true
    toc-title: "On this page"
    toc-depth: 3
execute:
  echo: true
  message: false
  warning: false
editor: visual
---

```{r}
library(here)
library(terra)
library(sf)
library(mapview)
```

## NDVI (Normalized Difference Vegetation Index)

NDVI is a simple, per-pixel indicator of ‚Äúgreenness‚Äù (photosynthetic activity).

### What it measures

Plants reflect more **near-infrared (NIR)** light and absorb **red** light. NDVI combines those two bands to highlight living vegetation.

### Formula

$$
\mathrm{NDVI} \;=\; \frac{\text{NIR} - \text{Red}}{\text{NIR} + \text{Red}}
$$

```{=html}
<!-- Plain-text fallback (if math is disabled):
NDVI = (NIR - Red) / (NIR + Red)
-->
```

### Typical value ranges

-   **0.6‚Äì0.9**: dense, healthy vegetation\
-   **0.2‚Äì0.5**: sparse/brown vegetation, shrubs/grass\
-   **0‚Äì0.2**: bare soil / urban\
-   **\< 0**: water, clouds, shadows, snow

### What data do we need to calculate NDVI

-   We can use the [Copernicus Open Access Hub](https://browser.dataspace.copernicus.eu/) to grab data form the satellite Sentinel 2

-   We specifically need Band 8 data for near-infared and Band 4 data for red

```{r}
# Paths to your .jp2 files
red_path <- here("mapping_bands/data/T04QFJ_20250906T210919_B04_10m.jp2")
nir_path <- here("mapping_bands/data/T04QFJ_20250906T210919_B08_10m.jp2")
```

### These .jp2 files contain raster data

-   Raster data is a way to represent geography as a **grid of cells (pixels)**. Each cell has a single value (e.g., elevation, temperature, NDVI) and the whole grid is georeferenced so every cell aligns to a real-world location

-   The `terra` package helps us read raster data into R

```{r}
# Read bands directly
red <- rast(red_path)
nir <- rast(nir_path)
```

### Calculating NDVI

$$
\mathrm{NDVI} \;=\; \frac{\text{NIR} - \text{Red}}{\text{NIR} + \text{Red}}
$$

```{r}
ndvi <- (nir - red) / (nir + red)
```

### Plotting NDVI

```{r}
plot(ndvi, main = "NDVI")
```

### Trimming the plot:

```{r}
# Create extent in lat/lon
oahu_ext_latlon <- ext(-158.3, -157.6, 21.2, 21.7)

# Create a temporary raster with this extent in WGS84
temp_raster <- rast(oahu_ext_latlon, crs = "EPSG:4326")

# Project to match your NDVI's CRS
temp_raster_utm <- project(temp_raster, crs(ndvi))

# Get the extent in UTM coordinates
oahu_bbox <- ext(temp_raster_utm)

# Crop your NDVI
ndvi_oahu <- crop(ndvi, oahu_bbox)
plot(ndvi_oahu, main = "NDVI - Oahu Area")
```

### Advanced Mapping

```{r}
# Reduce resolution significantly (factor of 8-10 should work)
ndvi_small <- aggregate(ndvi_oahu, fact = 4, fun = mean)

# Create custom breaks and colors
breaks <- c(-1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 1)
colors <- c("#4A90E2",      # Ocean (blue)
           "#CD853F",       # Bare soil/urban (tan)
           "#DEB887",       # Very sparse (light tan)
           "#F0E68C",       # Sparse (light yellow)
           "#ADFF2F",       # Moderate (yellow-green)
           "#32CD32",       # Good vegetation (lime green)
           "#228B22",       # Dense vegetation (forest green)
           "#006400")       # Very dense (dark green)

mapview(ndvi_small,
        at = breaks,
        col.regions = colors,
        layer.name = "NDVI",
        alpha = 0.8)
```

## Challenge

1.  Can you use an AI assistant to write R code below that calculates the percentages of each of these groups listed below in our image? Make a bar blot with `ggplot` showing the percentage for each group.

-   **0.6‚Äì0.9**: dense, healthy vegetation
-   **0.2‚Äì0.5**: sparse/brown vegetation, shrubs/grass
-   **0‚Äì0.2**: bare soil / urban
-   **\< 0**: water, clouds, shadows, snow

```{r}

category_df <- data.frame(
  Category = c("Water/clouds/shadows/snow", "Bare soil/urban", "Sparse vegetation", "Dense vegetation"),
  NDVI_Range = c("<0.0", "0.0‚Äì0.2", "0.2‚Äì0.5", "0.6‚Äì0.9"),
  Count = as.numeric(table(ndvi_category)[1:4])
)

# Step 2: Calculate percentages
category_df$Percentage <- category_df$Count / sum(category_df$Count) * 100

# Step 3: Match NDVI ranges to colors (same order!)
ndvi_colors <- c(
  "<0.0" = "#4A90E2",     # Water/clouds/shadows/snow
  "0.0‚Äì0.2" = "#CD853F",   # Bare soil/urban
  "0.2‚Äì0.5" = "#ADFF2F", # Sparse vegetation
  "0.6‚Äì0.9" = "#006400"  # Dense vegetation
)


ggplot(category_df, aes(x = reorder(Category, Percentage), y = Percentage, fill = NDVI_Range)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = ndvi_colors, name = "NDVI Point Range") +
  coord_flip() +
  labs(title = "NDVI Category Distribution ‚Äì O‚Äòahu",
       x = "NDVI Category",
       y = "Percentage of Area (%)") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.y = element_text(size = 10),
    legend.position = "right"
  )
```

2.  Find a research paper that utilizes NDVI to do something cool, paste a link to the paper below with a 3 sentence summary of how the paper uses NDVI

    Link: <https://journalijecc.com/index.php/IJECC/article/view/4343/8594>. This study used NDVI to measure vegetation and water in wetlands. It found that temperatures increased over time, while rainfall slightly decreased, leading to wetland loss. Vegetation was highest in 2015, but by 2023, much of the wetland had dried up, showing the importance of using NDVI and other tools to monitor land changes.
